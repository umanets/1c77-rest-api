const { Object: COMObject } = require('winax');
const { execSync } = require('child_process');
var winax = require('winax');

let v7 = null;
let v7PID = null;

function get1CV7PIDs() {
  try {
    const output = execSync('tasklist /FI "IMAGENAME eq 1cv7.exe" /FO CSV /NH', { encoding: 'utf8' });
    return output
      .split(/\r?\n/)
      .filter(line => line.trim())
      .map(line => {
        const cols = line.split(',');
        const pidStr = cols[1].replace(/"/g, '').trim();
        return parseInt(pidStr, 10);
      });
  } catch {
    return [];
  }
}

function connect1C(userName, password = "") {
  const beforePIDs = get1CV7PIDs();
  v7 = new COMObject('V77.Application');
  let initParams = '/d D:\\work\\one-s-trukr';
  if (userName) {
    initParams += ` /n "${userName}""`;
  }

  if (password) {
    initParams += ` /p "${password}""`;
  }
  const isConnected = v7.Initialize(v7.RMTrade, initParams, 'NO_SPLASH_SHOW');
  const afterPIDs = get1CV7PIDs();
  const newPIDs = afterPIDs.filter(pid => !beforePIDs.includes(pid));
  if (newPIDs.length > 0) {
    v7PID = newPIDs[0];
    console.log(`üÜî PID –ø—Ä–æ—Ü–µ—Å—Å–∞ 1–°: ${v7PID}`);
  } else {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å PID –ø—Ä–æ—Ü–µ—Å—Å–∞ 1–°');
  }
  if (!isConnected) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ 1–°.');
    process.exit(1);
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  return v7;
}

function disconnect1C() {
  if (v7) {
    try {
      v7.–ó–∞–≤–µ—Ä—à–∏—Ç—å–†–∞–±–æ—Ç—É–°–∏—Å—Ç–µ–º—ã(1);
      v7 = 0;
      winax.release(v7);
      global.gc && global.gc();
      console.log('üßπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –∑–∞–∫—Ä—ã—Ç–æ.');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç 1–°:', error);
    }
  }
}

function kill1C() {
  if (v7PID) {
    try {
      console.log(`üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º 1–°, PID: ${v7PID}`);
      execSync(`taskkill /PID ${v7PID} /F /T`);
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å 1–° –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, PID: ${v7PID}`);
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ 1–°:', error);
    } finally {
      v7PID = null;
    }
  } else {
    console.warn('‚ö†Ô∏è PID –ø—Ä–æ—Ü–µ—Å—Å–∞ 1–° –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º kill1C');
  }
}

module.exports = {
  connect1C,
  disconnect1C,
  kill1C,
};